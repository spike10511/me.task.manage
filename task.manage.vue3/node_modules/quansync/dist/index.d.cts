import { Q as QuansyncInput, a as QuansyncFn, b as QuansyncGenerator } from './shared/quansync.B9y3wBSc.cjs';
export { e as QuansyncAwaitableGenerator, d as QuansyncGeneratorFn, c as QuansyncInputObject } from './shared/quansync.B9y3wBSc.cjs';

declare const GET_IS_ASYNC: unique symbol;
/**
 * Creates a new Quansync function, a "superposition" between async and sync.
 */
declare function quansync<Return, Args extends any[] = []>(options: QuansyncInput<Return, Args> | Promise<Return>): QuansyncFn<Return, Args>;
/**
 * Converts a promise to a Quansync generator.
 */
declare function toGenerator<T>(promise: Promise<T> | QuansyncGenerator<T> | T): QuansyncGenerator<T>;

export { GET_IS_ASYNC, QuansyncFn, QuansyncGenerator, QuansyncInput, quansync, toGenerator };
